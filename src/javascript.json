{
	"rxjs.Observable.from.map.filter": {
		"prefix": "Observable.from",
		"description": "from(ish: ObservableInput<T>, scheduler: Scheduler): Observable<T>\nCreates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.",
		"body": [
			"Observable.from(${1:object})",
			".map(v => ${2:v})",
			".filter(v => ${3:true})",
			".subscribe(",
			"	v => { console.log( ${4:v}) },",
			"	e => { console.log( ${5:e} ) },",
			"	() => { console.log('complete') }",
			");"
		]
	},
	"rxjs.Observable.of": {
		"prefix": "Observable.of",
		"description": "of(values: ...T, scheduler: Scheduler): Observable<T>\nCreates an Observable that emits some values you specify as arguments, immediately one after the other, and then emits a complete notification.",
		"body": [
			"Observable.of(${1:object})",
			".map(v => ${2:v})",
			".filter(v => ${3:true})",
			".subscribe(",
			"	v => { console.log(${4:v}) },",
			"	e => { console.log(${5:e}) },",
			"	() => { console.log('complete') }",
			");"
		]
	},
	"rxjs.Observable.fromEvent": {
		"prefix": "Observable.fromEvent",
		"description": "fromEvent(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T> \nCreates an Observable that emits events of a specific type coming from the given event target.",
		"body": [
			"Observable.fromEvent(${1:target},${2:eventName})",
			".map(v => ${3:v})",
			".filter(v => ${4:true})",
			".subscribe(",
			"	v => { console.log(${5:v}) },",
			"	e => { console.log(${6:e}) },",
			"	() => { console.log('complete') }",
			");"
		]
	},
	"rxjs.Observable.create": {
		"prefix": "Observable.create",
		"description": "create(subscribe: function(subscriber: Subscriber): TeardownLogic): Observable\nCreates a new Observable that will execute the specified function when a Subscriber subscribes to it.",
		"body": [
			"Observable.create(subscriber => {",
			"	subscriber.next(${1:object});",
			"	subscriber.complete();",
			"})",
			".map(v => ${2:v})",
			".filter(v => ${3:true})",
			".subscribe(",
			"	v => { console.log(${4:v}) },",
			"	e => { console.log(${5:e}) },",
			"	() => { console.log('complete') }",
			");"
		]
	},
	"rxjs.Observable.empty": {
		"prefix": "Rx.Observable.empty",
		"description":"Creates an Observable that emits no items to the Observer and immediately emits a complete notification.",
		"body": [
			"Rx.Observable.empty().subscribe(",
				"null,",
				"null,",
				"() => { console.log('Completed') }",
			");"
		]
	},
	"rxjs.Observable.fromPromise": {
		"prefix": "Rx.Observable.fromPromise",
		"description":"Converts a Promises to an Observable sequence.",
		"body": [
			"Rx.Observable.fromPromise(fetch('someURI')).subscribe(",
				"(resolve) => {",
					"console.log('Resolve:',resolve)",
				"}, ",
				"(reject) => {",
					"console.log('Reject:',reject)",
				"},",
				"() => {",
					"console.log('Completed')",
				"}",
			");"	
		]
	},
	"rxjs.Observable.interval": {
		"prefix": "Rx.Observable.interval",
		"description":"Returns an observable sequence that produces a value after each period.",
		"body": [
			"Rx.Observable.interval(period).subscribe(",
				"v => {",
					"console.log('Value', v)",
				"},",
				"e => {",
					"console.log('Error', e)",
				"},",
				"() => {",
					"console.log('Completed')",
				"}",
			");"
		]
	},
	"rxjs.Observable.range": {
		"prefix": "Rx.Observable.range",
		"description":"Generates an observable sequence of integral numbers within a specified range.",
		"body": [
			"Rx.Observable.range(start, count).subscribe(",
				"v => {",
					"console.log('Value', v)",
				"},",
				"e => {",
					"console.log('Error', e)",
				"},",
				"() => {",
					"console.log('Completed')",
				"}",
			");"
		]
	},
	"rxjs.Observable.timer": {
		"prefix": "Rx.Observable.timer",
		"description":"Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.",
		"body": [
			"Rx.Observable.timer(dueTime, period).subscribe(",
				"v => {",
					"console.log('Value', v)",
				"},",
				"e => {",
					"console.log('Error', e)",
				"},",
				"() => {",
					"console.log('Completed')",
				"}",
			");"
		]
	}
}