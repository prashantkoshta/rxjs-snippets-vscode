{
	"rxjs.Observable.from.map.filter": {
		"prefix": "Observable.from",
		"description": "Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.",
		"body": [
			"Observable.from(${1:object})",
			".map(v => ${2:v})",
			".filter(v => ${3:true})",
			".subscribe(",
			"	v => { console.log( ${4:v}) },",
			"	e => { console.log( ${5:e} ) },",
			"	() => { console.log('complete') }",
			");"
		]
	},
	"rxjs.Observable.of": {
		"prefix": "Observable.of",
		"description": "Creates an Observable that emits some values you specify as arguments, immediately one after the other, and then emits a complete notification.",
		"body": [
			"Observable.of(${1:object})",
			".map(v => ${2:v})",
			".filter(v => ${3:true})",
			".subscribe(",
			"	v => { console.log(${4:v}) },",
			"	e => { console.log(${5:e}) },",
			"	() => { console.log('complete') }",
			");"
		]
	},
	"rxjs.Observable.fromEvent": {
		"prefix": "Observable.fromEvent",
		"description": "Creates an Observable that emits events of a specific type coming from the given event target.",
		"body": [
			"Observable.fromEvent(${1:target},${2:eventName})",
			".map(v => ${3:v})",
			".filter(v => ${4:true})",
			".subscribe(",
			"	v => { console.log(${5:v}) },",
			"	e => { console.log(${6:e}) },",
			"	() => { console.log('complete') }",
			");"
		]
	},
	"rxjs.Observable.create": {
		"prefix": "Observable.create",
		"description": "Creates a new Observable that will execute the specified function when a Subscriber subscribes to it.",
		"body": [
			"Observable.create(subscriber => {",
			"	subscriber.next(${1:object});",
			"	subscriber.complete();",
			"})",
			".map(v => ${2:v})",
			".filter(v => ${3:true})",
			".subscribe(",
			"	v => { console.log(${4:v}) },",
			"	e => { console.log(${5:e}) },",
			"	() => { console.log('complete') }",
			");"
		]
	}
}